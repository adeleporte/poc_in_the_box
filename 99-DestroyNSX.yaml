---
- hosts: localhost
  gather_facts: False
  tasks:

  - name: Gather Management Cluster MOIDs
    vcenter_gather_moids:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedManagementDataCenterName }}'
      cluster_name: '{{ nestedManagementClusterName }}'
      validate_certs: False
    register: gather_moids_mgmt_cluster_output
    tags: always

  - name: Gather Compute Cluster MOIDs
    vcenter_gather_moids:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedManagementDataCenterName }}'
      cluster_name: '{{ nestedComputeClusterName }}'
      validate_certs: False
    register: gather_moids_compute_cluster_output
    tags: always

  - name: Gather vCenter DVS MOIDs
    vcenter_gather_moids:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedManagementDataCenterName }}'
      dvs_name: '{{ nestedManagementVDSName }}'
      validate_certs: False
    register: gather_moids_mgmt_dvs_output
    tags: always

  - name: Gather vCenter PG MOIDs
    vcenter_gather_moids:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedManagementDataCenterName }}'
      portgroup_name: '{{ nestedManagementPGName }}'
      validate_certs: False
    register: gather_moids_mgmt_pg_output
    tags: always

  - name: Gather vCenter DataStore MOIDs
    vcenter_gather_moids:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedManagementDataCenterName }}'
      datastore_name: '{{ nestedDatastore }}'
      validate_certs: False
    register: gather_moids_datastore_output
    tags: always


  - name: Get All Edge Devices
    uri:
      url: "https://{{ nsxmanager_spec.host }}/api/4.0/edges"
      headers:
        Accept: "application/json"
      method: GET
      validate_certs: no
      user: "{{ nsxmanager_spec.user }}"
      password: "{{ nsxmanager_spec.password }}"
      force_basic_auth: yes
      body_format: json
    register: edges
    tags: delete

  # Delete Edges (DLR&EDGE)
  - name: Delete All Edges
    ignore_errors: yes
    uri:
      url: "https://{{ nsxmanager_spec.host }}/api/4.0/edges/{{ item.objectId }}"
      method: DELETE
      user: "{{ nsxmanager_spec.user }}"
      password: "{{ nsxmanager_spec.password }}"
      headers:
        Content-Type: "application/xml"
      force_basic_auth: yes
      status_code: 204
      validate_certs: no
    with_items: "{{ edges.json.edgePage.data }}"
    tags: delete

  - name: Get TransportZone
    uri:
      url: "https://{{ nsxmanager_spec.host }}/api/2.0/vdn/scopes"
      headers:
        Accept: "application/json"
      method: GET
      validate_certs: no
      user: "{{ nsxmanager_spec.user }}"
      password: "{{ nsxmanager_spec.password }}"
      force_basic_auth: yes
      body_format: json
    register: tz
    tags: delete

  # Delete Logical Switches
  - name: logicalSwitch Operation
    ignore_errors: yes
    nsx_logical_switch:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: absent
      transportzone: '{{ nsx_transportzone }}'
      name: '{{ item.value }}'
      description: '{{ item.value }}'
    with_dict: '{{ ls }}'

  # Delete Transport Zone
  - name: Delete Transport Zone
    ignore_errors: yes
    uri:
      url: "https://{{ nsxmanager_spec.host }}/api/2.0/vdn/scopes/{{ item.objectId }}"
      method: DELETE
      user: "{{ nsxmanager_spec.user }}"
      password: "{{ nsxmanager_spec.password }}"
      headers:
        Content-Type: "application/xml"
      force_basic_auth: yes
      status_code: 204
      validate_certs: no
    with_items: "{{ tz.json.allScopes }}"
    tags: delete

# Delete Segment Pool
  - name: Delete Segment Pool
    ignore_errors: yes
    nsx_segment_id_pool:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: absent
      idpoolstart: 5000
      idpoolend: 9999
      mcast_enabled: false
    register: create_segment_pool

# Delete VXLAN configuration
  - name: Delete Cluster VXLAN
    ignore_errors: yes
    nsx_vxlan_prep:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: absent
      cluster_moid: '{{ gather_moids_compute_cluster_output.object_id }}'
      dvs_moid: '{{ gather_moids_mgmt_dvs_output.object_id }}'
      mtu: 1600
    register: vxlan_prep

# Delete IP Pool
  - name: Delete VTEP IP
    ignore_errors: yes
    nsx_ippool:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: absent
      name: 'ansible_vtep_ip_pool'
      start_ip: '{{ nsx_vteps.ippool_start }}'
      end_ip: '{{ nsx_vteps.ippool_stop }}'
      prefix_length: '{{ nsx_vteps.ippool_prefixlength }}'
      gateway: '{{ nsx_vteps.ippool_gateway}}'
      dns_server_1: '{{ nsx_vteps.ippool_dns }}'
      dns_server_2: '{{ nsx_vteps.ippool_dns }}'
    register: ansible_vtep_ip_pool

# Delete Controllers
  - name: Delete Controller Cluster
    ignore_errors: yes
    nsx_controllers:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: absent
      deploytype: 'lab'
      #syslog_server: '172.17.100.129'
      ippool_id: 'ansible_controller_ip_pool'
      resourcepool_moid: '{{ gather_moids_mgmt_cluster_output.object_id }}'
      datastore_moid: '{{ gather_moids_datastore_output.object_id }}'
      network_moid: '{{ gather_moids_mgmt_pg_output.object_id }}'
      password: '{{ nsxmanager_spec.password }}'
    register: create_controller_cluster

# Delete IP Pool controller
  - name: Delete Controller IP Pool
    ignore_errors: yes
    nsx_ippool:
      nsxmanager_spec: "{{ nsxmanager_spec }}"
      state: absent
      name: 'ansible_controller_ip_pool'
      start_ip: '{{ nsx_controllers.ippool_start }}'
      end_ip: '{{ nsx_controllers.ippool_stop }}'
      prefix_length: '{{ nsx_controllers.ippool_prefixlength }}'
      gateway: '{{ nsx_controllers.ippool_gateway }}'
      dns_server_1: '{{ nsx_controllers.ippool_dns }}'
      dns_server_2: '{{ nsx_controllers.ippool_dns }}'
    register: create_ip_pool

# Delete SSO registration
  - name: Delete NSX Manager SSO
    ignore_errors: yes
    nsx_sso_registration:
      state: absent
      nsxmanager_spec: '{{ nsxmanager_spec }}'
      sso_lookupservice_url: 'lookupservice/sdk'
      sso_lookupservice_port: 443
      sso_lookupservice_server: '{{ cPodPSC }}'
      sso_admin_username: '{{ nestedVcUser }}'
      sso_admin_password: '{{ nestedVcPassword }}'
      accept_all_certs: true
    register: register_to_sso