---
- hosts: localhost
  gather_facts: False
  tasks:

  # Deploy the Cluster
  - name: Create Datacenter
    vmware_datacenter:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedManagementDataCenterName }}'
      validate_certs: false
      state: present

  # Deploy the Management Cluster
  - name: Create Management Cluster
    vmware_cluster:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedManagementDataCenterName }}'
      cluster_name: '{{ nestedManagementClusterName }}'
      enable_ha: false
      enable_drs: true
      enable_vsan: false
      validate_certs: false
      state: present

  # Add the first host to the Management Cluster
  - name: Add Management Hosts
    vmware_host:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedManagementDataCenterName }}'
      cluster_name: '{{ nestedManagementClusterName }}'
      esxi_hostname: '{{ item.value }}'
      esxi_username: '{{ nestedEsxUser }}'
      esxi_password: '{{ nestedEsxPassword }}'
      validate_certs: false
      state: present
    with_dict: '{{ managementEsx }}'

  # Create the Management VDS
  - name: Create Management VDS
    vmware_dvswitch:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedManagementDataCenterName }}'
      switch_name: '{{ nestedManagementVDSName }}'
      mtu: 1600
      uplink_quantity: 2
      discovery_proto: lldp
      discovery_operation: both
      validate_certs: false
      state: present

  # Create the Management portgroup
  - name: Create Management portgroup on the VDS
    vmware_dvs_portgroup:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      portgroup_name: '{{ nestedManagementPGName }}'
      switch_name: '{{ nestedManagementVDSName }}'
      vlan_id: '{{ nestedManagementPGVlan }}'
      num_ports: 120
      portgroup_type: earlyBinding
      validate_certs: false
      state: present

  # Add host1 to the Management VDS
  - name: Add Management Hosts to dVS
    vmware_dvs_host:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      esxi_hostname: '{{ item.value }}'
      switch_name: '{{ nestedManagementVDSName }}'
      vmnics:
        - vmnic1
      validate_certs: false
      state: present
    with_dict: '{{ managementEsx }}'


  # Deploy the Compute Cluster
  - name: Create Compute Cluster
    vmware_cluster:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedComputeDataCenterName }}'
      cluster_name: '{{ nestedComputeClusterName }}'
      enable_ha: false
      enable_drs: true
      enable_vsan: false
      validate_certs: false
      state: present

  # Add hosts to the Compute Cluster
  - name: Add Compute Hosts to Cluster
    vmware_host:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      datacenter_name: '{{ nestedComputeDataCenterName }}'
      cluster_name: '{{ nestedComputeClusterName }}'
      esxi_hostname: '{{ item.value }}'
      esxi_username: '{{ nestedEsxUser }}'
      esxi_password: '{{ nestedEsxPassword }}'
      validate_certs: false
      state: present
    with_dict: '{{ computeEsx }}'


  # Add host1 to the Management VDS
  - name: Add Compute Hosts to dVS
    vmware_dvs_host:
      hostname: '{{ nestedVcIPAddress }}'
      username: '{{ nestedVcUser }}'
      password: '{{ nestedVcPassword }}'
      esxi_hostname: '{{ item.value }}'
      switch_name: '{{ nestedManagementVDSName }}'
      vmnics:
        - vmnic1
      validate_certs: false
      state: present
    with_dict: '{{ computeEsx }}'

